!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
SafeList	SafeList.h	/^    SafeList() {}$/;"	f	class:ns_container::SafeList	access:public	signature:()
SafeList	SafeList.h	/^class SafeList\/\/ : public IteratorBase<TEle>$/;"	c	namespace:ns_container
__SAFE_LIST_H__	SafeList.h	2;"	d
_list	SafeList.h	/^    std::list<TEle> _list;$/;"	m	class:ns_container::SafeList	access:private
_rwlock	SafeList.h	/^    ns_thread::RWLock _rwlock;$/;"	m	class:ns_container::SafeList	access:private
add	SafeList.h	/^    void add(TEle ele)$/;"	f	class:ns_container::SafeList	access:public	signature:(TEle ele)
empty	SafeList.h	/^    bool empty()$/;"	f	class:ns_container::SafeList	access:public	signature:()
erase	SafeList.h	/^    void erase(const TEle& ele)$/;"	f	class:ns_container::SafeList	access:public	signature:(const TEle& ele)
extend	SafeList.h	/^    void extend(SafeList<TEle> lst)$/;"	f	class:ns_container::SafeList	access:public	signature:(SafeList<TEle> lst)
find	SafeList.h	/^    bool find(const TEle& ele, TEle* ret)$/;"	f	class:ns_container::SafeList	access:public	signature:(const TEle& ele, TEle* ret)
main	test_safelist.cpp	/^int main()$/;"	f	signature:()
ns_container	SafeList.h	/^namespace ns_container$/;"	n
ns_container::SafeList	SafeList.h	/^class SafeList\/\/ : public IteratorBase<TEle>$/;"	c	namespace:ns_container
ns_container::SafeList::SafeList	SafeList.h	/^    SafeList() {}$/;"	f	class:ns_container::SafeList	access:public	signature:()
ns_container::SafeList::_list	SafeList.h	/^    std::list<TEle> _list;$/;"	m	class:ns_container::SafeList	access:private
ns_container::SafeList::_rwlock	SafeList.h	/^    ns_thread::RWLock _rwlock;$/;"	m	class:ns_container::SafeList	access:private
ns_container::SafeList::add	SafeList.h	/^    void add(TEle ele)$/;"	f	class:ns_container::SafeList	access:public	signature:(TEle ele)
ns_container::SafeList::empty	SafeList.h	/^    bool empty()$/;"	f	class:ns_container::SafeList	access:public	signature:()
ns_container::SafeList::erase	SafeList.h	/^    void erase(const TEle& ele)$/;"	f	class:ns_container::SafeList	access:public	signature:(const TEle& ele)
ns_container::SafeList::extend	SafeList.h	/^    void extend(SafeList<TEle> lst)$/;"	f	class:ns_container::SafeList	access:public	signature:(SafeList<TEle> lst)
ns_container::SafeList::find	SafeList.h	/^    bool find(const TEle& ele, TEle* ret)$/;"	f	class:ns_container::SafeList	access:public	signature:(const TEle& ele, TEle* ret)
ns_container::SafeList::size	SafeList.h	/^    size_t size()$/;"	f	class:ns_container::SafeList	access:public	signature:()
ns_container::SafeList::~SafeList	SafeList.h	/^    ~SafeList() {}$/;"	f	class:ns_container::SafeList	access:public	signature:()
size	SafeList.h	/^    size_t size()$/;"	f	class:ns_container::SafeList	access:public	signature:()
~SafeList	SafeList.h	/^    ~SafeList() {}$/;"	f	class:ns_container::SafeList	access:public	signature:()
